from flask import Flask, render_template_string
import yagmail
import time
import threading
from google.oauth2 import service_account
from googleapiclient.discovery import build

# === CONFIG ===
SPREADSHEET_ID = '1LRDbzejU7X6BtwOUN8c3gMbsNqCqpdeBBzEDmM1TFwI'
RANGE_NAME = "'Data'!A1:Z"
SENDER_EMAIL = 'minhkieu702@gmail.com'
EMAIL_SUBJECT = 'C·∫£m ∆°n b·∫°n ƒë√£ ƒëi·ªÅn form'
EMAIL_BODY = 'Ch√∫ng t√¥i ƒë√£ nh·∫≠n ƒë∆∞·ª£c th√¥ng tin c·ªßa b·∫°n. Xin c·∫£m ∆°n!'
CHECK_INTERVAL = 10  # seconds

# === SETUP GOOGLE SHEETS API ===
SERVICE_ACCOUNT_FILE = 'credentials.json'
SCOPES = ['https://www.googleapis.com/auth/spreadsheets']
credentials = service_account.Credentials.from_service_account_file(
    SERVICE_ACCOUNT_FILE, scopes=SCOPES)
service = build('sheets', 'v4', credentials=credentials)

# === FLASK APP ===
app = Flask(__name__)

FORM_URL = "https://docs.google.com/forms/d/e/1FAIpQLScPONXC-bBvu14F4-2lT-0Yh71g-80XDGCPONa-3Vl9xyoGbQ/viewform?embedded=true"
HTML_TEMPLATE = f"""
<!DOCTYPE html>
<html>
<head>
    <title>Google Form Embed</title>
    <style>
        body {{
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            min-height: 100vh;
            margin: 0;
            font-family: Arial, sans-serif;
            background-color: #f5f5f5;
        }}
        h2 {{
            margin-bottom: 20px;
        }}
        iframe {{
            border: none;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            border-radius: 10px;
        }}
    </style>
</head>
<body>
    <h2>Vui l√≤ng ƒëi·ªÅn v√†o form b√™n d∆∞·ªõi:</h2>
    <iframe src="{FORM_URL}" width="640" height="800" allowfullscreen></iframe>
</body>
</html>
"""


@app.route('/')
def index():
    return render_template_string(HTML_TEMPLATE)

# === BACKGROUND THREAD TO POLL FOR NEW ENTRIES ===
def poll_google_sheet():
    print("üü¢ B·∫Øt ƒë·∫ßu ki·ªÉm tra form li√™n t·ª•c...")
    last_row_count = 0
    headers = []

    while True:
        try:
            sheet = service.spreadsheets()
            result = sheet.values().get(spreadsheetId=SPREADSHEET_ID, range=RANGE_NAME).execute()
            rows = result.get('values', [])

            if not rows or len(rows) <= 1:
                time.sleep(CHECK_INTERVAL)
                continue

            if not headers:
                headers = rows[0]  # L·∫•y d√≤ng ti√™u ƒë·ªÅ (A1)

            if len(rows) > last_row_count + 1:
                new_rows = rows[last_row_count + 1:]  # B·ªè qua d√≤ng ti√™u ƒë·ªÅ
                for i, row in enumerate(new_rows):
                    try:
                        actual_row_index = last_row_count + i + 2  # +2 v√¨ header (A1) v√† index b·∫Øt ƒë·∫ßu t·ª´ 0

                        # B·ªè qua n·∫øu ch∆∞a c√≥ ƒë·ªß c·ªôt d·ªØ li·ªáu
                        if len(row) < 6:
                            print(f"‚ö†Ô∏è D√≤ng {actual_row_index} kh√¥ng ƒë·ªß d·ªØ li·ªáu.")
                            continue

                        # N·∫øu ƒë√£ c√≥ 'ƒê√£ g·ª≠i' trong c·ªôt M (index 12), b·ªè qua
                        if len(row) >= 13 and row[12].strip().lower() == 'ƒë√£ g·ª≠i':
                            continue

                        timestamp = row[0]  # C·ªôt A: D·∫•u th·ªùi gian
                        email = row[11]      # C·ªôt L: Contact email...

                        print(f"üì¨ G·ª≠i email t·ªõi {email} (l√∫c {timestamp})")

                        yag = yagmail.SMTP(SENDER_EMAIL, 'avez ezbd ujsn kayu')  # App password
                        yag.send(
                            to=email,
                            subject=EMAIL_SUBJECT,
                            contents=f"{EMAIL_BODY}\n\n‚è∞ Th·ªùi gian g·ª≠i: {timestamp}"
                        )

                        # ƒê√°nh d·∫•u v√†o c·ªôt M l√† 'ƒê√£ g·ª≠i'
                        service.spreadsheets().values().update(
                            spreadsheetId=SPREADSHEET_ID,
                            range=f"Data!M{actual_row_index}",
                            valueInputOption='RAW',
                            body={'values': [['ƒê√£ g·ª≠i']]}
                        ).execute()

                    except Exception as inner:
                        print(f"‚ùå L·ªói x·ª≠ l√Ω d√≤ng m·ªõi t·∫°i d√≤ng {actual_row_index}: {inner}")

                last_row_count = len(rows) - 1  # C·∫≠p nh·∫≠t s·ªë d√≤ng ƒë√£ x·ª≠ l√Ω

        except Exception as e:
            print(f"‚ùå L·ªói khi truy c·∫≠p Google Sheet: {e}")

        time.sleep(CHECK_INTERVAL)

# === START BACKGROUND THREAD ===
threading.Thread(target=poll_google_sheet, daemon=True).start()

if __name__ == '__main__':
    app.run(debug=True)
