import streamlit as st
import pandas as pd
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import os
from sklearn.preprocessing import minmax_scale
import plotly.graph_objects as go
from workflow import send_dashboard_link

# C·∫•u h√¨nh trang Dashboard
st.set_page_config(layout="wide", page_title="Influmate AI Recommender")


# --- B·ªò NH·ªö CACHE ---
# @st.cache_data(ttl=600)  # T·∫Øt cache t·∫°m th·ªùi
def load_data(script_dir):
    try:
        profiles_path = os.path.join(script_dir, 'influencer_profiles.csv')
        df_profiles = pd.read_csv(profiles_path)

        credentials_path = os.path.join(script_dir, 'credentials.json')
        scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
        creds = ServiceAccountCredentials.from_json_keyfile_name(credentials_path, scope)
        client = gspread.authorize(creds)

        spreadsheet_forms = client.open("InfluMate")
        sheet_requests = spreadsheet_forms.worksheet("Data")
        df_requests = pd.DataFrame(sheet_requests.get_all_records())

        return df_profiles, df_requests
    except Exception as e:
        st.error(f"L·ªói t·∫£i d·ªØ li·ªáu: {e}")
        return None, None


# --- C√ÅC H√ÄM LOGIC (Gi·ªØ nguy√™n t·ª´ recommender.py) ---
def get_recommendations(campaign, influencer_profiles):
    # (Copy to√†n b·ªô n·ªôi dung h√†m get_recommendations t·ª´ file recommender.py v√†o ƒë√¢y)
    scores = []
    profiles_scaled = influencer_profiles.copy()
    metrics_to_scale = ['avg_engagement_rate', 'avg_share_rate', 'avg_comment_rate', 'avg_reach_rate']
    profiles_scaled[metrics_to_scale] = minmax_scale(profiles_scaled[metrics_to_scale])
    campaign_goal = campaign.get('campaign_goal', '').lower()
    for _, influencer in profiles_scaled.iterrows():
        score = 0
        if 'brand awareness' in campaign_goal:
            score += influencer['avg_reach_rate'] * 0.6 + influencer['avg_share_rate'] * 0.2 + (
                0.2 if influencer['kol_tier'] in ['Macro', 'Mega'] else 0)
        elif 'engagement' in campaign_goal:
            score += influencer['avg_engagement_rate'] * 0.5 + influencer['avg_comment_rate'] * 0.4 + (
                0.1 if influencer['kol_tier'] in ['Nano', 'Micro'] else 0)
        elif 'sales' in campaign_goal or 'attract new users' in campaign_goal:
            score += influencer['avg_engagement_rate'] * 0.6 + influencer['avg_comment_rate'] * 0.2 + (
                0.2 if influencer['kol_tier'] in ['Nano', 'Micro'] else 0)
        elif 'launch a new product' in campaign_goal:
            score += influencer['avg_reach_rate'] * 0.4 + influencer['avg_engagement_rate'] * 0.4 + (
                0.2 if influencer['kol_tier'] in ['Micro', 'Macro'] else 0)
        else:
            score += influencer['avg_engagement_rate'] * 0.5 + influencer['avg_reach_rate'] * 0.5
        scores.append(score)
    influencer_profiles['match_score'] = scores
    return influencer_profiles.sort_values(by='match_score', ascending=False)


def create_bar_chart(df, username):
    """T·∫°o bi·ªÉu ƒë·ªì c·ªôt cho m·ªôt influencer c·ª• th·ªÉ"""
    influencer_profiles = df[df['username'] == username].iloc[0]
    
    fig = go.Figure(data=[
        go.Bar(name='Followers', x=['Followers'], y=[influencer_profiles['followers']]),
        go.Bar(name='Likes', x=['Likes'], y=[influencer_profiles['likescount']]),
        go.Bar(name='Comments', x=['Comments'], y=[influencer_profiles['commentscount']])
    ])
    
    fig.update_layout(
        title=f'Th·ªëng k√™ c·ªßa {username}',
        barmode='group',
        showlegend=True
    )
    
    return fig


# --- X√ÇY D·ª∞NG GIAO DI·ªÜN DASHBOARD ---

st.title("üöÄ Influmate - AI Recommender Dashboard")

# T·∫°o tabs cho c√°c ph·∫ßn kh√°c nhau c·ªßa dashboard
tab1, tab2 = st.tabs(["üìä Th·ªëng k√™ Influencer", "üìù ƒêƒÉng k√Ω Chi·∫øn d·ªãch"])

# Th√™m n√∫t ƒëƒÉng xu·∫•t v√†o sidebar
with st.sidebar:
    st.markdown("---")  # Th√™m ƒë∆∞·ªùng k·∫ª ph√¢n c√°ch
    if st.button("üö™ ƒêƒÉng xu·∫•t", type="primary", use_container_width=True):
        st.session_state.clear()  # X√≥a t·∫•t c·∫£ session state
        st.rerun()  # T·∫£i l·∫°i trang

with tab1:
    st.write("Th·ªëng k√™ v√† ph√¢n t√≠ch d·ªØ li·ªáu Influencer")
    
    # T·∫£i d·ªØ li·ªáu
    script_dir = os.path.dirname(os.path.abspath(__file__))
    influencer_profiles, df_requests = load_data(script_dir)

    if influencer_profiles is not None and df_requests is not None:
        # Hi·ªÉn th·ªã danh s√°ch influencer ƒë·ªÉ ch·ªçn
        selected_username = st.selectbox(
            "Ch·ªçn Influencer ƒë·ªÉ xem th·ªëng k√™:",
            options=influencer_profiles['username'].unique()
        )
        
        # T·∫°o v√† hi·ªÉn th·ªã bi·ªÉu ƒë·ªì
        if selected_username:
            fig = create_bar_chart(influencer_profiles, selected_username)
            st.plotly_chart(fig, use_container_width=True)
            
            # Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt
            st.subheader("Th√¥ng tin chi ti·∫øt")
            influencer_info = influencer_profiles[influencer_profiles['username'] == selected_username].iloc[0]
            col1, col2, col3 = st.columns(3)
            with col1:
                st.metric("Followers", f"{influencer_info['followers']:,}")
            with col2:
                st.metric("Likes", f"{influencer_info['likescount']:,}")
            with col3:
                st.metric("Comments", f"{influencer_info['commentscount']:,}")
    else:
        st.error("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu, vui l√≤ng ki·ªÉm tra l·∫°i k·∫øt n·ªëi v√† file.")

with tab2:
    st.header("üìù ƒêƒÉng k√Ω Chi·∫øn d·ªãch M·ªõi")
    st.write("Vui l√≤ng ƒëi·ªÅn th√¥ng tin chi·∫øn d·ªãch c·ªßa b·∫°n v√†o form b√™n d∆∞·ªõi:")
    
    # Nh√∫ng Google Form
    google_form_url = "https://docs.google.com/forms/d/e/1FAIpQLSdcwgPmynO6D2eailGclDiy6_JnHsPWb4XrYOkHzeGWwBJ4qA/viewform?embedded=true"
    st.components.v1.iframe(google_form_url, height=800, scrolling=True)